shiny::runApp('D:/GIS Files/tourismdashboard')
# load libraries
library(sf)
library(mapdeck)
library(tidyverse)
library(htmltools)
# load data
pols <- st_read('data/rotterdam_center_smallclip_hub.shp')
points <- st_read('data/rotterdam_adress_full.shp')
# turn point data with addresses in regular dataframe
st_geometry(points) <- NULL
points <- points[,c("pandid", "pandstatus", "pandbouwja")] #  keep only relevant columns
# execute merge
buildings <- merge(pols,points, by.x="identifica", by.y="pandid",all.x=T, all.y=F, no.dups=T)
# drop duplicates
buildings <- buildings[!duplicated(buildings[,c('identifica')]),]
# drop superfluous columns
drop <- c("aanduiding",  "aanduidi_1" , "officieel" ,  "inonderzoe" , "documentnu" , "documentda",
"begindatum" , "einddatumt" , "gemeenteco" , "X.ground_0_", "X.ground_01", "X.ground_02" ,"X.ground_03",
"X.ground_04", "X.ground_05" , "X.roof_0_25" , "X.rmse_0_25", "roof_flat"  , "nr_ground_",
"nr_roof_pt" , "ahn_file_d" , "ahn_versio" , "height_val" , "tile_id", "X.rmse_0_50", "X.rmse_0_75",
"X.rmse_0_90", "X.rmse_0_95", "X.rmse_0_99", "X.roof_0_50", "X.roof_0_75", "X.roof_0_90" ,"X.roof_0_95",
"geom_Lengt" , "geom_Area", "pandbouwja", "bouwjaar" )
buildings = buildings[,!(names(buildings) %in% drop)]
# assign correct crs (RD NEW)
st_crs(buildings) <- NA
st_crs(buildings) <- 28992
buildings <- st_simplify(buildings)
# find centers of buildings for arcs
bouw <- buildings[which(buildings$pandstatus=="Bouwvergunning verleend"),]
bouwcenter <- st_centroid(bouw)
sloop <- buildings[which(buildings$pandstatus=="Sloopvergunning verleend"),]
sloopcenter <- st_centroid(sloop)
hub <- buildings[which(buildings$identifica=="hub"),]
hubcenter <- st_centroid(hub)
# create a df for arcs
arcs <- rbind(sloopcenter,bouwcenter,hubcenter)
arcs$pandstatus <- as.character(arcs$pandstatus)
arcs$pandstatus[arcs$identifica=="hub"] <- 'futurehub'
arcs <- st_transform(arcs,4326)
arcs <- arcs %>%
mutate(start_lat = unlist(map(arcs$geometry,1)),
start_lon = unlist(map(arcs$geometry,2)))
arcs <- arcs[,c("pandstatus","start_lat","start_lon")]
st_geometry(arcs) <- NULL
arcs$end_lat <- 4.492484
arcs$end_lon <- 51.90134
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv'
flights <- read.csv(url)
# transform to WGS84
buildings <- st_transform(buildings,4326)
buildings <- st_zm(buildings, drop = TRUE, what = "ZM")
# determine colors
regular    <- '#63adcb'
demolish   <- '#a45b4c'
build      <- '#bdd47b'
hub        <- '#2AFF00'
# reclassify (delete if memory becomes an issue)
buildings$color <- NA
buildings$color[buildings$pandstatus=="Pand in gebruik"] <- regular
buildings$color[buildings$pandstatus=="Bouw gestart"] <- regular
buildings$color[buildings$pandstatus=="Pand in gebruik (niet ingemeten)"] <- regular
buildings$color[buildings$pandstatus=="Pand in gebruik"] <- regular
buildings$color[is.na(buildings$pandstatus)] <- regular
buildings$color[buildings$identifica=="hub"] <- hub
buildings$pandstatus[buildings$identifica=="hub"] <- 'Pand in gebruik'
buildings$pandstatus[is.na(buildings$pandstatus)] <- 'Pand in gebruik'
buildings$X.roof_0_99[buildings$identifica=="hub"] <- 20
buildings$color[buildings$pandstatus=="Bouwvergunning verleend"] <- build
buildings$color[buildings$pandstatus=="Sloopvergunning verleend"] <- demolish
# create arcs
# filter out bouw
plot(st_geometry(bouw))
arcs$color[arcs$pandstatus=="Bouwvergunning verleend"] <- build
arcs$color[arcs$pandstatus=="Sloopvergunning verleend"] <- demolish
arcs$color[arcs$pandstatus=="futurehub"] <- build
setwd("D:/Metabolic/3DBAG")
# load libraries
library(sf)
library(mapdeck)
library(tidyverse)
library(htmltools)
# load data
pols <- st_read('data/rotterdam_center_smallclip_hub.shp')
points <- st_read('data/rotterdam_adress_full.shp')
# turn point data with addresses in regular dataframe
st_geometry(points) <- NULL
points <- points[,c("pandid", "pandstatus", "pandbouwja")] #  keep only relevant columns
# execute merge
buildings <- merge(pols,points, by.x="identifica", by.y="pandid",all.x=T, all.y=F, no.dups=T)
# drop duplicates
buildings <- buildings[!duplicated(buildings[,c('identifica')]),]
# drop superfluous columns
drop <- c("aanduiding",  "aanduidi_1" , "officieel" ,  "inonderzoe" , "documentnu" , "documentda",
"begindatum" , "einddatumt" , "gemeenteco" , "X.ground_0_", "X.ground_01", "X.ground_02" ,"X.ground_03",
"X.ground_04", "X.ground_05" , "X.roof_0_25" , "X.rmse_0_25", "roof_flat"  , "nr_ground_",
"nr_roof_pt" , "ahn_file_d" , "ahn_versio" , "height_val" , "tile_id", "X.rmse_0_50", "X.rmse_0_75",
"X.rmse_0_90", "X.rmse_0_95", "X.rmse_0_99", "X.roof_0_50", "X.roof_0_75", "X.roof_0_90" ,"X.roof_0_95",
"geom_Lengt" , "geom_Area", "pandbouwja", "bouwjaar" )
buildings = buildings[,!(names(buildings) %in% drop)]
# assign correct crs (RD NEW)
st_crs(buildings) <- NA
st_crs(buildings) <- 28992
buildings <- st_simplify(buildings)
# find centers of buildings for arcs
bouw <- buildings[which(buildings$pandstatus=="Bouwvergunning verleend"),]
bouwcenter <- st_centroid(bouw)
sloop <- buildings[which(buildings$pandstatus=="Sloopvergunning verleend"),]
sloopcenter <- st_centroid(sloop)
hub <- buildings[which(buildings$identifica=="hub"),]
hubcenter <- st_centroid(hub)
# create a df for arcs
arcs <- rbind(sloopcenter,bouwcenter,hubcenter)
arcs$pandstatus <- as.character(arcs$pandstatus)
arcs$pandstatus[arcs$identifica=="hub"] <- 'futurehub'
arcs <- st_transform(arcs,4326)
arcs <- arcs %>%
mutate(start_lat = unlist(map(arcs$geometry,1)),
start_lon = unlist(map(arcs$geometry,2)))
arcs <- arcs[,c("pandstatus","start_lat","start_lon")]
st_geometry(arcs) <- NULL
arcs$end_lat <- 4.492484
arcs$end_lon <- 51.90134
url <- 'https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv'
flights <- read.csv(url)
# transform to WGS84
buildings <- st_transform(buildings,4326)
buildings <- st_zm(buildings, drop = TRUE, what = "ZM")
# determine colors
regular    <- '#63adcb'
demolish   <- '#a45b4c'
build      <- '#bdd47b'
hub        <- '#2AFF00'
# reclassify (delete if memory becomes an issue)
buildings$color <- NA
buildings$color[buildings$pandstatus=="Pand in gebruik"] <- regular
buildings$color[buildings$pandstatus=="Bouw gestart"] <- regular
buildings$color[buildings$pandstatus=="Pand in gebruik (niet ingemeten)"] <- regular
buildings$color[buildings$pandstatus=="Pand in gebruik"] <- regular
buildings$color[is.na(buildings$pandstatus)] <- regular
buildings$color[buildings$identifica=="hub"] <- hub
buildings$pandstatus[buildings$identifica=="hub"] <- 'Pand in gebruik'
buildings$pandstatus[is.na(buildings$pandstatus)] <- 'Pand in gebruik'
buildings$X.roof_0_99[buildings$identifica=="hub"] <- 20
buildings$color[buildings$pandstatus=="Bouwvergunning verleend"] <- build
buildings$color[buildings$pandstatus=="Sloopvergunning verleend"] <- demolish
# create arcs
# filter out bouw
plot(st_geometry(bouw))
arcs$color[arcs$pandstatus=="Bouwvergunning verleend"] <- build
arcs$color[arcs$pandstatus=="Sloopvergunning verleend"] <- demolish
arcs$color[arcs$pandstatus=="futurehub"] <- build
View(arcs)
View(bouw)
bouw
setwd("D:/Metabolic/3DBAG")
library(sf)
?st_write
setwd("D:/Metabolic/3DBAG")
library(RPostgres)
library(sf)
library(mapdeck)
library(tidyverse)
library(htmltools)
# establish connection
con <- RPostgres::dbConnect(Postgres(),
dbname = "gis",
user = "doadmin",
host = "db-postgresql-ams3-95943-jul-1-backup-do-user-2478742-0.db.ondigitalocean.com",
port = 25060,
password = "yhgilcglkylqnt44",
sslmode = 'require')
# query database
buildings <- dbGetQuery(con,
"
select  distinct on (pandid) pandid, openbareruimtenaam, huisnummer, huisletter, pandbouwjaar, pand.pandstatus, (CAST(\"roof_0.90\" AS float) - CAST(\"ground_0.40\" AS float)) as height, ST_astext(geopunt) as centroid, ST_astext(geovlak) as polygon
from bagactueel.adres_full as adres
right join bagactueel.pand as pand
on adres.pandid = pand.identificatie
left join bag3dfull.bag3dtest as hoogte
on adres.pandid = hoogte.identificatie
where gemeentenaam = 'Hoogeveen' and einddatumtijdvakgeldigheid is null")
# turn into spatial object
buildings <- st_as_sf(buildings, wkt = "polygon")
buildings <- st_simplify(buildings)
st_crs(buildings) <- 28992
buildings <- st_transform(buildings, 4326)
buildings <- st_zm(buildings, drop = TRUE, what = "ZM")
st_write(buildings, 'output/hoogeveen.geojson')
st_write(buildings, 'output/hoogeveen.json')
st_write(buildings, 'output/hoogeveen.geoJSON')
st_write(buildings, 'output/hoogeveen.geoJSON', overwrite = T)
st_write(buildings, 'output/hoogeveen.geoJSON', overwrite = TRUE)
?st_write
st_write(buildings, 'output/hoogeveen.geoJSON', delete_dsn=T)
st_write(buildings, 'output/hoogeveen.shp', delete_dsn=T)
View(buildings)
names(buildings)
st_write(buildings, 'output/hoogeveen.geojson')
buildings
buildings <- st_read('output/hoogeveen.geojson')
names(buildings)
?st_write
# establish connection
con <- RPostgres::dbConnect(Postgres(),
dbname = "gis",
user = "doadmin",
host = "db-postgresql-ams3-95943-jul-1-backup-do-user-2478742-0.db.ondigitalocean.com",
port = 25060,
password = "yhgilcglkylqnt44",
sslmode = 'require')
# query database
buildings <- dbGetQuery(con,
"
select  distinct on (pandid) pandid, openbareruimtenaam, huisnummer, huisletter, pandbouwjaar, pand.pandstatus, (CAST(\"roof_0.90\" AS float) - CAST(\"ground_0.40\" AS float)) as height, ST_astext(geopunt) as centroid, ST_astext(geovlak) as polygon
from bagactueel.adres_full as adres
right join bagactueel.pand as pand
on adres.pandid = pand.identificatie
left join bag3dfull.bag3dtest as hoogte
on adres.pandid = hoogte.identificatie
where gemeentenaam = 'Hoogeveen' and einddatumtijdvakgeldigheid is null")
# turn into spatial object
buildings <- st_as_sf(buildings, wkt = "polygon")
buildings <- st_simplify(buildings)
st_crs(buildings) <- 28992
buildings <- st_transform(buildings, 4326)
buildings <- st_zm(buildings, drop = TRUE, what = "ZM")
st_write(buildings, 'output/hoogeveen.geojson')
buildingsread <- st_read('output/hoogeveen.geojson')
names(buildingsread)
names(buildings)
st_write(buildings, 'output/hoogeveen.geojson', delete_dsn = T, factorsAsCharacter = F)
buildingsread <- st_read('output/hoogeveen.geojson')
names(buildings)
names(buildingsread)
buildings$pandstaat <- buildings$pandstatus
View(buildings)
class(buildings$pandstatus)
class(buildings$openbareruimtenaam)
buildings$pandstaat <- NULL
names(buildings)
class(buildings$pandstatus)
buildings$pandstatus <- as.character(buildings$pandstatus)
class(buildings$pandstatus)
st_write(buildings, 'output/hoogeveen.geojson', delete_dsn = T)
buildings_update<-st_read('output/hoogeveen.geojson')
summary(buildings_update$pandstatus)
buildings<-st_read('output/hoogeveen.geojson')
source('D:/Metabolic/3DBAG/postgis.R', echo=TRUE)
# determine colors
regular    <- '#63adcb'
demolish   <- '#a45b4c'
build      <- '#bdd47b'
hub        <- '#2AFF00'
buildings$color <- NA
buildings$color[buildings$pandstatus=="Pand in gebruik"] <- regular
buildings$color[buildings$pandstatus=="Bouw gestart"] <- regular
buildings$color[buildings$pandstatus=="Pand in gebruik (niet ingemeten)"] <- regular
buildings$color[buildings$pandstatus=="Pand in gebruik"] <- regular
buildings$color[is.na(buildings$pandstatus)] <- regular
buildings$color[buildings$pandstatus=="Nieuwbouw"] <- build
buildings$color[buildings$pandstatus=="Sloopvergunning verleend"] <- demolish
buildings$color[buildings$openbareruimtenaam=="A G Bellstraat" & buildings$huisnummer == 29 & buildings$huisletter == "b"] <- hub
bouw <- buildings[which(buildings$pandstatus=="Nieuwbouw"),]
bouwcenter <- st_centroid(bouw)
sloop <- buildings[which(buildings$pandstatus=="Sloopvergunning verleend"),]
sloopcenter <- st_centroid(sloop)
hub <- buildings[which(buildings$openbareruimtenaam=="A G Bellstraat" & buildings$huisnummer == 29 & buildings$huisletter == "b"),]
hubcenter <- st_centroid(hub)
arcs <- rbind(sloopcenter,bouwcenter,hubcenter)
arcs <- arcs %>%
mutate(start_lat = unlist(map(arcs$polygon,1)),
start_lon = unlist(map(arcs$polygon,2)))
arcs <- arcs[,c("pandstatus","start_lat","start_lon", "color")]
st_geometry(arcs) <- NULL
arcs <- arcs %>%
mutate(start_lat = unlist(map(arcs$polygon,1)),
start_lon = unlist(map(arcs$polygon,2)))
arcs <- arcs[,c("pandstatus","start_lat","start_lon", "color")]
arcs
names(arcs)
library(RPostgres)
library(postGIStools)
library(sf)
library(mapdeck)
library(tidyverse)
library(htmltools)
arcs <- arcs %>%
mutate(start_lat = unlist(map(arcs$polygon,1)),
start_lon = unlist(map(arcs$polygon,2)))
names(arcs)
View(arcs)
arcs <- arcs %>%
mutate(start_lat = unlist(map(arcs$polygon,1)),
start_lon = unlist(map(arcs$polygon,2)))
arcs
arcs <- arcs %>%
tidyverse::mutate(start_lat = unlist(map(arcs$polygon,1)),
start_lon = unlist(map(arcs$polygon,2)))
?mutate
View(arcs)
buildings<-st_read('output/hoogeveen.geojson')
buildings
# determine colors
regular    <- '#63adcb'
demolish   <- '#a45b4c'
build      <- '#bdd47b'
hub        <- '#2AFF00'
buildings$color <- NA
buildings$color[buildings$pandstatus=="Pand in gebruik"] <- regular
buildings$color[buildings$pandstatus=="Bouw gestart"] <- regular
buildings$color[buildings$pandstatus=="Pand in gebruik (niet ingemeten)"] <- regular
buildings$color[buildings$pandstatus=="Pand in gebruik"] <- regular
buildings$color[is.na(buildings$pandstatus)] <- regular
buildings$color[buildings$pandstatus=="Nieuwbouw"] <- build
buildings$color[buildings$pandstatus=="Sloopvergunning verleend"] <- demolish
buildings$color[buildings$openbareruimtenaam=="A G Bellstraat" & buildings$huisnummer == 29 & buildings$huisletter == "b"] <- hub
bouw <- buildings[which(buildings$pandstatus=="Nieuwbouw"),]
bouwcenter <- st_centroid(bouw)
sloop <- buildings[which(buildings$pandstatus=="Sloopvergunning verleend"),]
sloopcenter <- st_centroid(sloop)
hub <- buildings[which(buildings$openbareruimtenaam=="A G Bellstraat" & buildings$huisnummer == 29 & buildings$huisletter == "b"),]
hubcenter <- st_centroid(hub)
arcs <- rbind(sloopcenter,bouwcenter,hubcenter)
arcs
arcs <- arcs %>%
mutate(start_lat = unlist(map(arcs$geometry,1)),
start_lon = unlist(map(arcs$geometry,2)))
arcs <- arcs[,c("pandstatus","start_lat","start_lon", "color")]
st_geometry(arcs) <- NULL
arcs$end_lat =  unlist(map(hubcenter$polygon,1))
arcs$end_lon = unlist(map(hubcenter$polygon,2))
key <- 'pk.eyJ1Ijoiam9leWhvZGRlIiwiYSI6ImNrMDNqYXE4aTJmamgzbnE5eDJ5cHExZHAifQ.k4AdDHOgCofSV9aErOhdYg'
output <- mapdeck(token = key, style = mapdeck_style("dark") , pitch = 50) %>%
add_polygon(
data = buildings
, fill_colour = "pandbouwjaar"
, palette = "spectral"
, elevation = "height",
tooltip = "pandbouwjaar",
auto_highlight = TRUE,
legend=TRUE,
legend_format = list( fill_colour = as.integer ))
output <- mapdeck(token = key, style = mapdeck_style("dark") , pitch = 50) %>%
add_polygon(
data = buildings
, fill_colour = "pandbouwjaar"
, palette = "spectral"
, elevation = "height",
tooltip = "pandbouwjaar",
auto_highlight = TRUE,
legend=TRUE,
legend_format = list( fill_colour = as.integer )) %>%
add_arc(
data = arcs
, origin = c("start_lat", "start_lon")
, destination = c("end_lat", "end_lon")
, stroke_from = "color"
, stroke_to = "color"
, stroke_width = 4
)
arcs
hubcenter
arcs$end_lat =  unlist(map(hubcenter$geometry,1))
arcs$end_lon = unlist(map(hubcenter$geometry,2))
key <- 'pk.eyJ1Ijoiam9leWhvZGRlIiwiYSI6ImNrMDNqYXE4aTJmamgzbnE5eDJ5cHExZHAifQ.k4AdDHOgCofSV9aErOhdYg'
output <- mapdeck(token = key, style = mapdeck_style("dark") , pitch = 50) %>%
add_polygon(
data = buildings
, fill_colour = "pandbouwjaar"
, palette = "spectral"
, elevation = "height",
tooltip = "pandbouwjaar",
auto_highlight = TRUE,
legend=TRUE,
legend_format = list( fill_colour = as.integer )) %>%
add_arc(
data = arcs
, origin = c("start_lat", "start_lon")
, destination = c("end_lat", "end_lon")
, stroke_from = "color"
, stroke_to = "color"
, stroke_width = 4
)
save_html(output,'Hoogeveen_nieuwbouw.html')
output <- mapdeck(token = key, style = mapdeck_style("dark") , pitch = 50) %>%
add_polygon(
data = buildings
, fill_colour = "color"
#, palette = "spectral"
, elevation = "height",
tooltip = "pandbouwjaar",
auto_highlight = TRUE,
legend=TRUE,
legend_format = list( fill_colour = as.integer )) %>%
add_arc(
data = arcs
, origin = c("start_lat", "start_lon")
, destination = c("end_lat", "end_lon")
, stroke_from = "color"
, stroke_to = "color"
, stroke_width = 4
)
save_html(output,'Hoogeveen_nieuwbouw.html')
buildings
output <- mapdeck(token = key, style = mapdeck_style("dark") , pitch = 50) %>%
add_polygon(
data = buildings
, fill_colour = "pandbouwjaar"
, palette = "spectral"
, elevation = "height",
tooltip = "pandbouwjaar",
auto_highlight = TRUE,
legend=TRUE,
legend_format = list( fill_colour = as.integer )) %>%
add_arc(
data = arcs
, origin = c("start_lat", "start_lon")
, destination = c("end_lat", "end_lon")
, stroke_from = "color"
, stroke_to = "color"
, stroke_width = 4
)
save_html(output,'Hoogeveen_nieuwbouw.html')
setwd("D:/Metabolic/3DBAG")
setwd("D:/Metabolic/visualization")
save_html(output,'index.html')
